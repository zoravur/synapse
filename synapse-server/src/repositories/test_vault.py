# test_vault.py
# Code generated by ChatGPT.
import pytest
from pathlib import Path
from vault import VaultManager, PathNotFoundError, InvalidPathError, UnsupportedFileTypeError, FileExistsError

@pytest.fixture
def temp_vault(tmp_path):
    """Fixture to create a temporary vault directory"""
    return VaultManager(tmp_path)

def test_create_file(temp_vault):
    """Test creating a new file in the vault"""
    file_info = temp_vault.create_file("test.md", "Hello, world!")
    
    assert file_info["path"] == "test.md"
    assert file_info["type"] == "file"
    assert file_info["content"] == "Hello, world!"
    assert file_info["size"] > 0

def test_create_existing_file_raises_error(temp_vault):
    """Test that creating an existing file raises an error"""
    temp_vault.create_file("test.md", "Hello, world!")
    
    with pytest.raises(FileExistsError):
        temp_vault.create_file("test.md", "New content")

def test_create_directory(temp_vault):
    """Test creating a new directory"""
    dir_info = temp_vault.create_directory("new_dir")

    assert dir_info["path"] == "new_dir"
    assert dir_info["type"] == "directory"

def test_create_existing_directory_raises_error(temp_vault):
    """Test that creating an existing directory raises an error"""
    temp_vault.create_directory("new_dir")
    
    with pytest.raises(FileExistsError):
        temp_vault.create_directory("new_dir")

def test_get_document(temp_vault):
    """Test retrieving an existing document"""
    temp_vault.create_file("test.md", "Hello, world!")
    file_info = temp_vault.get_document("test.md")

    assert file_info["path"] == "test.md"
    assert file_info["content"] == "Hello, world!"

def test_get_nonexistent_document_raises_error(temp_vault):
    """Test retrieving a non-existent file raises an error"""
    with pytest.raises(PathNotFoundError):
        temp_vault.get_document("missing.md")

def test_list_directory(temp_vault):
    """Test listing a directory's contents"""
    temp_vault.create_file("test.md", "Hello")
    temp_vault.create_directory("subdir")
    contents = temp_vault.list_directory("")

    assert len(contents["children"]) == 2
    assert any(child["path"] == "test.md" for child in contents["children"])
    assert any(child["path"] == "subdir" for child in contents["children"])

def test_update_file(temp_vault):
    """Test updating an existing file"""
    temp_vault.create_file("test.md", "Old content")
    updated_info = temp_vault.update_file("test.md", "New content")

    assert updated_info["path"] == "test.md"
    assert updated_info["content"] == "New content"

def test_update_nonexistent_file_raises_error(temp_vault):
    """Test updating a non-existent file raises an error"""
    with pytest.raises(PathNotFoundError):
        temp_vault.update_file("missing.md", "New content")

def test_invalid_path_raises_error(temp_vault):
    """Test that trying to escape the vault directory raises an error"""
    with pytest.raises(InvalidPathError):
        temp_vault.get_document("../outside.md")

def test_unsupported_file_type_raises_error(temp_vault):
    """Test that unsupported file types raise an error"""
    with pytest.raises(UnsupportedFileTypeError):
        temp_vault.create_file("test.txt", "Unsupported content")

def test_list_directory_with_max_depth(temp_vault):
    """Test listing directory with max_depth"""
    temp_vault.create_directory("parent")
    temp_vault.create_file("parent/file.md", "Content")

    contents = temp_vault.list_directory("parent", max_depth=0)
    assert len(contents["children"]) == 0  # No recursion

    contents = temp_vault.list_directory("parent", max_depth=1)
    assert len(contents["children"]) == 1  # Includes "file.md"

if __name__ == "__main__":
    pytest.main()
